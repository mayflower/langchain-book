# Die Nutzung von Googles Knowledge Graph APIs mit LangChain

Googles Knowledge Graph (KG) ist eine Wissensbasis, mit deren Hilfe Google relevante Informationen in einer Infobox neben den Suchergebnissen anzeigt. Sie ermöglicht es dem Nutzer, die Antwort mit einem Blick zu sehen, wie eine sofortige Antwort. Die Daten werden automatisch aus einer Vielzahl von Quellen ermittelt, die Orte, Personen, Unternehmen und mehr enthalten. Ich arbeitete 2013 in einem Projekt bei Google, das den eigenen KG für ein internes Projekt nutzte.

Mit der öffentlichen Knowledge Graph Search API von Google kannst du Entitäten im Google Knowledge Graph finden. Die API verwendet standardmäßige schema.org-Typen und ist konform mit der JSON-LD-Spezifikation. Sie unterstützt das Suchen und Nachschlagen von Entitäten.

Du kannst die Knowledge Graph Search API zur Erstellung von Anwendungen nutzen, die Google Knowledge Graph verwenden. Zum Beispiel kannst Du die API verwenden, um eine Suchmaschine zu bauen, die Ergebnisse auf der Grundlage der Entitäten im Knowledge Graph ausgibt.

Im nächsten Kapitel benutzen wir auch DBPedia und Wikidata aus dem öffentlichen KG. Eine Begrenzung von Googles KP API ist, dass sie zum Nachschlagen von Entitäten (Menschen, Orte, Organisationen, etc.) designt ist. DBPedia und Wikidata ermöglichen es, mit der SPARQL Query Language eine größere Bandbreite von Informationen zu finden, wie z.B. Beziehungen zwischen Entitäten. Du kannst mit der Google KP API einige Beziehungen zwischen Entitäten finden, z.B. alle Filme eines bestimmten Regisseurs oder alle Bücher eines bestimmten Autors. Du kannst mit der API auch Informationen finden wie etwa alle Menschen, die an einem bestimmten Film mitgewirkt haben, oder alle Schauspieler, die in einer bestimmten TV Show aufgetreten sind.

## Den Zugriff auf Google Knowledge Graph-APIs einrichten

Um einen API Key für die Google Knowledge Graph Search API zu bekommen, musst Du zur Google API Console gehen, die Google Knowledge Graph Search API aktivieren und einen API Key für dein Projekt erstellen. Dann kannst du mit diesem API Key Anfragen an die Knowledge Graph Search API stellen.

Mit diesen Schritten generierst du den API Key:

* gehe zur API Console
* wähle ein Projekt aus der Projektliste oder erstelle ein neues
* falls die Seite "APIs & Services" noch nicht geöffnet ist, öffne das Menü auf der linken Seite und wähle "APIs & Services" aus
* wähle links "Anmeldedaten" aus
* klicke "Anmeldedaten erstellen" und wähle dann API Key aus

Danach kannst du diesen API Key für Anfragen an die Knowledge Graph Search API verwenden.

Wenn ich Googles APIs verwende, setze ich den Access Key in **~/.google_api_key** und lese den Key so ein:

```
1 api_key=open(str(Path.home())+"/.google_api_key").read()
```

Du kannst auch Umgebungsvariablen zum Speichern von Access Keys nutzen. Hier ein Codeschnipsel für einen API-Aufruf, der Informationen über mich einholt:

{format: python}
![](code/05/05-API-Call.py)

Die Ausgabe von JSON-LD würde so aussehen:

{format: console}
```
{'@context': {'@vocab': 'http://schema.org/',
              'EntitySearchResult':
              'goog:EntitySearchResult',
              'detailedDescription':
              'goog:detailedDescription',
              'goog': 'http://schema.googleapis.com/',
              'kg': 'http://g.co/kg',
              'resultScore': 'goog:resultScore'},
'@type': 'ItemList',
'itemListElement': [{'@type': 'EntitySearchResult',
                     'result': {'@id': 'kg:/m/0b6_g82',
                                '@type': ['Thing',
                                          'Person'],
                                'description': 'Author',
                                'name':
                                'Mark Louis Watson',
                                'url':
                                'http://markwatson.com'},
                     'resultScore': 43}]}
```

Damit der Code zum Abrufen von Entitätsinformationen von Google KG nicht wiederholt werden muss, habe ich das Dienstprogramm **Google_KG_helper.py** geschrieben, das den vorhergehenden Code einschließt und in eine Mini-Library generalisiert:

{format: python}
![](code/05/05-Client_Calling.py)

Das Haupttestskript ist in der Datei **Google_Knowledge_Graph_Search.py**:

{format: python}
![](05-example_client_calling.py)

Die Ausgabe für das Beispiel ist:


{format: console}
```
$ python Google_Knowledge_Graph_Search.py
Context text: Bill Clinton 42nd U.S. President William Je\
fferson Clinton is an American retired politician who ser
ved as the 42nd president of the United States from 1993
to 2001.
INFO:root:> [build_index_from_documents] Total LLM token \
usage: 0 tokens
INFO:root:> [build_index_from_documents] Total embedding \
token usage: 0 tokens
INFO:root:> [query] Total LLM token usage: 77 tokens
INFO:root:> [query] Total embedding token usage: 0 tokens
QUESTION: When was Bill president?
RESPONSE:
Bill Clinton was president from 1993 to 2001.
```

Der Zugriff auf Knowledge Graphs von Google, DBPedia und Wikidata ermöglicht es dir, Fakten und Wissen aus der realen Welt in deine Anwendungen zu integrieren. Ich arbeite zwar hauptsächlich im Bereich des Deep Learning, benutze aber auch häufig Knowledge Graphs in meiner Arbeit und für meine persönlichen Recherche. Ich denke, dass du, werter Leser, den Zugriff auf hochstrukturierte Daten in KGs zuerlässiger und in vielen Fällen einfacher finden wirst als Web Scraping.
