# Verwendung von LLMs zur Organisation von Informationen in unseren Google Drives

Mein digitales Leben besteht aus dem Schreiben, der Arbeit als KI-Anwender, sowie aus Lernaktivitäten, die ich mit meinem Selbstbild als "gentleman scientist" rechtfertige. Cloud-Speicher wie GitHub, Google Drive, Microsoft OneDrive und iCloud sind zentral für meine Aktivitäten.

Vor etwa zehn Jahren verbrachte ich zwei Monate damit, ein System in Clojure zu schreiben, das meine eigene, persönliche DropBox werden sollte, ergänzt durch verschiedene NLP-Tools und ein FireFox-Plugin, um Web-Clippings direkt an mein persönliches System zu senden. Um ehrlich zu sein, habe ich mein eigenes Projekt nach ein paar Monaten wieder eingestellt, weil die Zeit, die ich für die Organisation meiner Informationen benötigte, einen größeren Aufwand darstellte als sie Nutzen brachte.

In diesem Kapitel werde ich dir Teile eines neuen Systems vorstellen, das ich für meinen persönlichen Gebrauch entwickle und das mir helfen soll, mein Material in Google Drive (und eventuell in anderen Cloud-Diensten) zu organisieren. Sei nicht überrascht, wenn das fertige Projekt ein weiteres Beispiel in einer zukünftigen Auflage dieses Buches ist!

Mit den unten aufgeführten Google-Einrichtungsanweisungen erhältst du ein Pop-up-Fenster mit einer Warnung wie dieser (dies zeigt meine Google Mail-Adresse, du solltest hier deine eigene Google Mail-Adresse sehen, vorausgesetzt, du hast dich kürzlich mit deinem Standard-Webbrowser bei Google Mail angemeldet):

![](images/gwarning.png)

Du musst zuerst auf **Advanced** und dann auf den Link **Go to GoogleApiExamples (unsafe)** in der unteren linken Ecke klicken und dann dieses Beispiel vorübergehend in deinem Gmail-Konto autorisieren.

## Einrichten der Anforderungen

Du musst ein Credential unter <https://console.cloud.google.com/cloud-resource-manager> erstellen (kopiert aus der [PyDrive-Dokumentation](https://pythonhosted.org/PyDrive/quickstart.html), wobei der Anwendungstyp auf "Desktop" geändert werden muss):

- suche nach "Google Drive API", wähle den Eintrag und klicke auf "Aktivieren"
- wähle "Anmeldedaten" aus dem linken Menü, klicke "Anmeldedaten erstellen", wähle "OAuth-Client ID"
- lege Produktname und Berechtigungsbildschirm fest ⇾ klicke auf "Zustimmungsbildschirm konfigurieren" und folge den Anweisungen. Sobald du fertig bist:
- wiederhole Schritt 2
- wähle als "Anwendungstyp" eine Desktopanwendung
- gib einen geeigneten Namen ein
- >gib http://localhost:8080 für "Authorized JavaScript origins" ein
- >gib http://localhost:8080/ für "Authorized redirect URIs" ein
- klicke auf "Speichern"
- klicke auf "JSON herunterladen" auf der rechten Seite der Client-ID, um client_secret_.json herunterzuladen. Kopiere die heruntergeladene JSON-Anmeldedatei in das Beispielverzeichnis **google_drive_llm** für dieses Kapitel

## Hilfsprogramm, um alle Textdateien aus dem obersten Google Drive-Ordner zu holen

Für dieses Beispiel werden wir unser Testskript bei Google authentifizieren und alle Textdateien der obersten Ebene mit Namen, die auf ".txt" enden, in das lokale Dateisystem im Unterverzeichnis **data** kopieren. Der Code befindet sich im Verzeichnis **google_drive_llm** in der Datei **fetch_txt_files.py** (bearbeitet um an die Seitenbreite anzupassen):

{format: python}
![](code/07/07-fetch_txt_files.py)

Zum Testen habe ich nur eine Textdatei mit der Dateierweiterung ".txt" auf meinem Google Drive, sodass meine Ausgabe nach der Ausführung dieses Skripts wie folgt aussieht. Ich habe die Ausgabe bearbeitet, um meine Datei-IDs zu ändern und nur ein paar Zeilen der Debug-Ausdrucks der Dateititel auszugeben.

{format: console}
```
$ python fetch_txt_files.py
Your browser has been opened to visit:

https://accounts.google.com/o/oauth2/auth?client_id=5\29311921932-xsmj3hhiplr0dhqjln13fo4rrtvoslo8.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3B6180%2F&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&access_type=offline&response_type=code

Authentication successful.

title: testdata, id: 1TZ9bnL5XYQvKACJw8VoKWdVJ8jeCszJ
title: sports.txt, id: 18RN4ojvURWt5yoKNtDdAJbh4fvmRpzwb
title: Anaconda blog article, id: 1kpLaYQA4Ao8ZbdFaXU209hg-z0tv1xA7YOQ4L8y8NbU
title: backups_2023, id: 1-k_r1HTfuZRWN7vwWWsYqfssl0C96J2x
title: Work notes, id: 1fDyHyZtKI-0oRNabA_P41LltYjGoek21
title:SedonaWritingGroupContactList,id:1zK-5v9OQUfy8Sw33nTCl9vnL822hL1w

['sports.txt', '18RN4ojvURWt5yoKNtDdAJbh4fvmRpzwb', 'Sport is generally recognised as activities based in physical athleticism or physical dexterity.[3] Sports are usually governed by rules to ensure fair competition and consistent adjudication of the winner.\n\n"Sport" comes from the Old French desport meaning "leisure", with the oldest definition in English from around 1300 being "anything humans find amusing or entertaining".[4]\n\nOther bodies advocate widening the definition of sport to include all physical activity and exercise. For instance, the Council of Europe include all forms of physical exercise, including those completed just for fun.\n\n']
```

## Vektorindizes für Dateien in speziellen Google Drive-Ordnern erstellen

Das Beispiel-Skript im letzten Abschnitt sollte lokale Kopien der Textdateien in deinem obersten Google Documents Ordner mit der Endung ".txt" erzeugt haben. Jetzt verwenden wir den gleichen LlamaIndex Testcode wie in einem früheren Kapitel. Hier is das Testskript **index_and_QA.py**: 

{format: python}
![](code/07/07-index_and_QA.py)

Für meine Testdatei sieht der Output so aus:

{format: console}
```
$ python index_and_QA.py
INFO:llama_index.token_counter.token_counter:> [build_index_from_documents] Total LLM token usage: 0 tokens
INFO:llama_index.token_counter.token_counter:> [build_index_from_documents] Total embedding token usage: 111 tokens
INFO:llama_index.token_counter.token_counter:> [query] Total LLM token usage: 202 tokens
INFO:llama_index.token_counter.token_counter:> [query] Total embedding token usage: 7 tokens

Sport is generally recognised as activities based in physical athleticism or physical dexterity that are governed by rules to ensure fair competition and consistent adjudication of the winner. It is anything humans find amusing or entertaining, and can include all forms of physical exercise, even those completed just for fun.
```

Es ist interessant zu sehen, wie das Ergebnis der Abfrage in eine schöne Form umgeschrieben wird, verglichen mit dem Rohtext in der Datei **sports.txt** in meinem Google Drive:

{format: console}
```
$ cat data/sports.txt
Sport is generally recognised as activities based in physical athleticism or physical dexterity.[3] Sports are usually governed by rules to ensure fair competition and consistent adjudication of the winner.

"Sport" comes from the Old French desport meaning "leisure", with the oldest definition in English from around 1300 being "anything humans find amusing or entertaining".[4]

Other bodies advocate widening the definition of sport to include all physical activity and exercise. For instance, the Council of Europe include all forms of physical exercise, including those completed just for fun.
```

## Zusammenfassung Google Drive Beispiele

Wenn du Google Drive bereits zum Speichern deiner Arbeitsnotizen und anderer Dokumente verwendest, dann magst du vielleicht das einfache Beispiel in diesem Kapitel erweitern, um dein eigenes Abfragesystem für Dokumente zu erstellen. Zusätzlich zu Google Drive nutze ich auch Microsoft Office 365 und OneDrive für meine Arbeit und persönlichen Projekte.

Ich habe noch keine eigenen Konnektoren für OneDrive geschrieben, aber das ist auf meiner persönlichen Todo-Liste, unter Verwendung der Microsoft Library <https://github.com/OneDrive/onedrive-sdk-python.>
